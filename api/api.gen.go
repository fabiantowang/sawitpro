// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = []struct {
	// Message Error message
	Message string `json:"message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Password User password
	Password string `json:"password"`

	// Phone User phone number
	Phone string `json:"phone"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// Jwt User JWT
	Jwt string `json:"jwt"`

	// Userid User ID
	Userid openapi_types.UUID `json:"userid"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	// Fullname User full name
	Fullname string `json:"fullname"`

	// Phone User phone number
	Phone string `json:"phone"`
}

// ProfileUpdateRequest defines model for ProfileUpdateRequest.
type ProfileUpdateRequest struct {
	// Fullname User full name
	Fullname *string `json:"fullname,omitempty"`

	// Phone User phone number
	Phone *string `json:"phone,omitempty"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	// Fullname User full name
	Fullname string `json:"fullname"`

	// Password User password
	Password string `json:"password"`

	// Phone User phone number
	Phone string `json:"phone"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	// Userid User ID
	Userid openapi_types.UUID `json:"userid"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ProfileUpdateJSONRequestBody defines body for ProfileUpdate for application/json ContentType.
type ProfileUpdateJSONRequestBody = ProfileUpdateRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This is endpoint for user login.
	// (POST /login)
	Login(ctx echo.Context) error
	// This is endpoint for getting user profile.
	// (GET /profile)
	ProfileGet(ctx echo.Context) error
	// This is endpoint for updating user profile.
	// (PUT /profile)
	ProfileUpdate(ctx echo.Context) error
	// This is endpoint for user registration.
	// (POST /register)
	Register(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// ProfileGet converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileGet(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProfileGet(ctx)
	return err
}

// ProfileUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileUpdate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProfileUpdate(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/profile", wrapper.ProfileGet)
	router.PUT(baseURL+"/profile", wrapper.ProfileUpdate)
	router.POST(baseURL+"/register", wrapper.Register)

}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse LoginResponse

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ProfileGetRequestObject struct {
}

type ProfileGetResponseObject interface {
	VisitProfileGetResponse(w http.ResponseWriter) error
}

type ProfileGet200JSONResponse ProfileResponse

func (response ProfileGet200JSONResponse) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProfileGet403Response struct {
}

func (response ProfileGet403Response) VisitProfileGetResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type ProfileUpdateRequestObject struct {
	Body *ProfileUpdateJSONRequestBody
}

type ProfileUpdateResponseObject interface {
	VisitProfileUpdateResponse(w http.ResponseWriter) error
}

type ProfileUpdate200Response struct {
}

func (response ProfileUpdate200Response) VisitProfileUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ProfileUpdate400JSONResponse ErrorResponse

func (response ProfileUpdate400JSONResponse) VisitProfileUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ProfileUpdate403Response struct {
}

func (response ProfileUpdate403Response) VisitProfileUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type ProfileUpdate409Response struct {
}

func (response ProfileUpdate409Response) VisitProfileUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type RegisterRequestObject struct {
	Body *RegisterJSONRequestBody
}

type RegisterResponseObject interface {
	VisitRegisterResponse(w http.ResponseWriter) error
}

type Register200JSONResponse RegisterResponse

func (response Register200JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Register400JSONResponse ErrorResponse

func (response Register400JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// This is endpoint for user login.
	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// This is endpoint for getting user profile.
	// (GET /profile)
	ProfileGet(ctx context.Context, request ProfileGetRequestObject) (ProfileGetResponseObject, error)
	// This is endpoint for updating user profile.
	// (PUT /profile)
	ProfileUpdate(ctx context.Context, request ProfileUpdateRequestObject) (ProfileUpdateResponseObject, error)
	// This is endpoint for user registration.
	// (POST /register)
	Register(ctx context.Context, request RegisterRequestObject) (RegisterResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProfileGet operation middleware
func (sh *strictHandler) ProfileGet(ctx echo.Context) error {
	var request ProfileGetRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileGet(ctx.Request().Context(), request.(ProfileGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileGetResponseObject); ok {
		return validResponse.VisitProfileGetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ProfileUpdate operation middleware
func (sh *strictHandler) ProfileUpdate(ctx echo.Context) error {
	var request ProfileUpdateRequestObject

	var body ProfileUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ProfileUpdate(ctx.Request().Context(), request.(ProfileUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProfileUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ProfileUpdateResponseObject); ok {
		return validResponse.VisitProfileUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Register operation middleware
func (sh *strictHandler) Register(ctx echo.Context) error {
	var request RegisterRequestObject

	var body RegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Register(ctx.Request().Context(), request.(RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Register")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RegisterResponseObject); ok {
		return validResponse.VisitRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWwW7jNhD9FWLao2A5zaJAdeu23SLFFiiyWfQQ+EBLY4mpRHKH5KZGoH8vSMqWZUl2",
	"N4mRmyWOh2/evHmjJ8hVo5VEaQ1kT2DyChsefv5GpOgWjVbSoH8hLDbhRJPSSFZgeGrQGF6GiAJNTkJb",
	"oSRkMQHbHSdgtxohA2NJyBLaNgHCL04QFpDd79Os9oFq/YC5hXb/ghPxrX/+qEohb/GLQ2PHgDQ35lFR",
	"MUb02SCx/XECG0UNt5DBwbuG//sRZWkryH58l0Aj5P5xVEICulIS5y7yZ0y6Zo00THx1PUh8tTxHTrwm",
	"6XFOsdSx0jdsSMvDo50B+sffdzBRmzNIYo7Fm18P+XNOFGc73OVLApKpAv4itRE1zpewcXUteTNHuD9m",
	"4fxlnTpdxh7ELueJUj7rglucVeqb1TPCe4ulMBbpMlBfNJCX6+Ruqg47emrAepLmBHqhkRmDaRMwmDsS",
	"dvvJW3a8fo2ckH523lR2Tx92F8YpDwbvM8XTHkFlrYbWJxZyo8YlvOf5PygLZpC+ihzZRhHz8FjDJS+x",
	"QWkZlwXjzlYorch5+GMCtcixIysKCP68uQuuLmyNO3I+xbSQwFckE6+8WiwXSx+pNEquBWRwHV75Ptkq",
	"lJzW3vVCJ1TUre9HuPumgCyaIkRW0dj3qtj6oFxJizLEc63rDm36YJTs16D/9T3hBjL4Lu33ZNotyXSw",
	"hgJ1E10P+Jjn1PchUtK32JLD0POoqFDSD8vla0Ps9DqBMQQw4/IcjfFcv4u3Hze/YLQvNAHjmobTFjK4",
	"q4RhwjCUhVZC2l4XofBFCE91tEOfuMSJLnV2+TtauCAZx/tlgo444hHZkJXrMSsfFK1FUaAczCNk98NJ",
	"vF+1q7OUlWitkGWkrqNrEdzOzfMV18uF1D25wiYo6+KYC4HPUfrJfGNpvkp1w6/bibIGkj8vAB/x0zji",
	"FyU3tThy7OcpJPAxIRE/X9Rtpnkf3O2uC4nl+Pthzg3pcL7eyhRHe/ybjOCtNPg/bfeQ4UVM6lc2kgmy",
	"c1R3yz5L01rlvK68XtpV+18AAAD//2pJxS4LDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
